1.用gazebo加载模型gazebo崩溃，之前在笔记本上也出现过这种情况，目前尝试查看夏令营带回来的代码看能不能找到解决问题的办法
 <geometry>
        <mesh filename="package://car_urdf/meshes/left_front_orient_Link.STL"/>
      </geometry>
改为
      <geometry>
        <mesh
          filename="file://$(find car_urdf)/meshes/base_link.STL" />
      </geometry>
————————————————
版权声明：本文为CSDN博主「G果」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_42899627/article/details/142005482
成功解决问题


2.接下来是解决模型在gazebo中不显色的问题，以及添加插件实现传感器功能并且完成在名空间内发布名重定向以及在rviz的订阅
gazebo中不显色主要是因为之前的显色配置都是rviz兼容的，而gazebo不兼容，想要在gazebo中显色得额外在link标签内用gazbeo标签或者其他的显色配置标签来进行配置
使用了ros2和gazebo联动的一个插件完成了话题的发布并成功的在rviz2中进行订阅，不过再次发现很多libgazebo_ros开头的插件都是没有那么好用的，尤其是在gazebo11以及ros2环境下，尽量寻找gazebo和ros2环境下使用的插件：
  <gazebo reference="depth_cam_link">
    <sensor name="depth_camera_sensor" type="depth">
      <update_rate>30.0</update_rate>
      <visualize>true</visualize>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>5.0</far>
        </clip>
      </camera>

      <plugin name="gazebo_ros_camera" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>/camera</namespace>
          <argument>depth_enabled:=true</argument>
          <argument>point_cloud_enabled:=true</argument>
        </ros>

        <camera_name>depth_camera</camera_name>
        <frame_name>depth_cam_link</frame_name>

        <!-- ROS 话题 -->
        <image_topic_name>color/image_raw</image_topic_name>
        <camera_info_topic_name>color/camera_info</camera_info_topic_name>
        <depth_image_topic_name>depth/image_raw</depth_image_topic_name>
        <depth_camera_info_topic_name>depth/camera_info</depth_camera_info_topic_name>
        <point_cloud_topic_name>depth/points</point_cloud_topic_name>

        <pointCloudCutoff>0.3</pointCloudCutoff>
        <pointCloudCutoffMax>5.0</pointCloudCutoffMax>
      </plugin>
    </sensor>
  </gazebo>

3.日后可能碰到的问题（在gazebo中添加深度相机需要的相关参数配置）在此留下可能能解决问题的网址，如果遇到了可以查阅以供参考：
https://classic.gazebosim.org/tutorials?tut=ros_depth_camera&cat=connect_ros


4.对ros2的许多命令都还不熟悉，这对后续理解整个结构和工作流以及可能存在的文件编写有阻碍，还有gazebo中机械臂关节疲软的问题
包括如果使用libgazebo_ros_diff插件轮子进行控制会出现轮子乱跳问题，以及就算不配置插件，轮子也会出现与底盘脱落的情况，不知道是不是自重过大导致物理上成受不了

目前查到的都是需要对被控制的joint添加ros_control插件，有些提到了传动，以及摩擦系数
不过上述的配置方式更像是ros1和gazebo之间的配置方式，所以可能需要查询在适配ros2的时候是不是会需要修改更新插件，以及配置方式是不是发生了改变

目前经查询以及询问AI，得到目前觉得可行的方案如下：
| 模块                                  | 作用                                   | 文件类型              | ROS 2 对应插件/包                                           | 是否必须      |
| ----------------------------------   | ------------------------------         | -------------        | ------------------------------------------------------ | --------- |
| **URDF / Xacro**                     | 定义机器人模型、关节、link                 | `.urdf.xacro`        | —                                                      | ✅         |
| **Transmission 元素**                 | 连接关节与执行器                          | URDF 内部标签         | `<transmission>`                                       | ✅         |
| **gazebo_ros2_control 插件**          | 让 Gazebo 识别 ROS 2 控制接口            | URDF 插件部分         | `libgazebo_ros2_control.so`                            | ✅         |
| **ros2_control HardwareInterface**   | 定义硬件抽象（joint 的命令/状态）           | `.yaml`              | `ros2_control` 框架                                      | ✅         |
| **Controller Manager**               | 管理所有控制器                            | `.yaml` + 节点        | `controller_manager`                                   | ✅         |
| **Controllers**                      | 执行具体控制，如速度/轨迹/位置               | `.yaml`              | `joint_trajectory_controller`, `diff_drive_controller` | ✅         |
| **Joint State Broadcaster**          | 发布 joint_states 给 RViz/MoveIt2        |`.yaml`               | `joint_state_broadcaster`                              | ✅         |
| **MoveIt2 配置**                      | 规划与执行轨迹                            | SRDF + YAML          | `moveit2` + `move_group`                               | ⚙️（如果要规划） |

此前出现了controller_manager无法启动的情况，导致根本无法把控制关节的话题发布出来，在参考了暑期夏令营的piper机械臂的配置以后部分完成了相关配置，成功启动了controller_manager，但是对应的插件还是无法启动
报错类似如下：
Failed loading controller arm_controller
且相关的可参考官方文档在如下网址：https://control.ros.org/humble/doc/gazebo_ros2_control/doc/index.html?utm_source=chatgpt.com

在这个手册中的例子中可以控制关节移动，且非瞬间位置变换，而是有渐进的关节变换
