ign gazebo所用的通讯管理器和ros2所用的通讯管理器不是互通的，之前老版本是gazebo_ros，现在是ros_ign插件来建立联系，且也只能多监视在通讯的话题，不能监察内部的通讯情况

现在在逐渐了解很多软件的用法，但是对整个ubuntu系统的硬件调度以及软件机理相关的知识实在是匮乏，所以希望能在日后补全这一部分的知识漏洞

了解到gazebo也有自己的存储模型的文件结构，但是gazebo使用sdf文件对机器人模型以及环境进行描述，而ros2以及moveit 使用urdf文件进行描述，chatgpt推荐以urdf文件作为模板，把这个文件转换成sdf文件格式构成gazebo模型文件

gazebo的model文件夹内的文件结构如下：
atabase

    database.config : Meta data about the database. This is now populated automatically from CMakeLists.txt
    model_1 : A directory for model_1
        model.config : Meta-data about model_1
        model.sdf : SDF description of the model
        model.sdf.erb : Ruby embedded SDF model description
        meshes : A directory for all COLLADA and STL files
        materials : A directory which should only contain the textures and scripts subdirectories
            textures : A directory for image files (jpg, png, etc).
            scripts : A directory for OGRE material scripts
        plugins: A directory for plugin source and header files


未来如果结合ros2,moveit,gazebo,rviz2的话对机器人进行仿真以及操控会有的基础的文件结构：
ros2_ws/
├── src/
│   ├── your_robot_description/      # 模型描述（URDF）
│   │   ├── urdf/
│   │   │   └── robot.urdf.xacro
│   │   ├── meshes/
│   │   │   ├── base_link.STL
│   │   │   ├── arm_link.DAE
│   │   ├── launch/
│   │   │   └── display.launch.py    # RViz显示模型
│   │   └── package.xml / CMakeLists.txt
│   │
│   ├── your_robot_gazebo/           # 仿真功能包
│   │   ├── worlds/
│   │   │   ├── empty.world
│   │   │   └── your_world.world
│   │   ├── launch/
│   │   │   └── gazebo.launch.py     # 启动 Gazebo + 机器人
│   │   ├── models/
│   │   │   └── your_robot/
│   │   │       ├── model.config
│   │   │       ├── model.sdf
│   │   │       ├── meshes/
│   │   │       ├── materials/
│   │   ├── urdf/
│   │   │   └── robot_gazebo.urdf.xacro
│   │   └── package.xml / CMakeLists.txt
│   │
│   ├── your_robot_moveit_config/    # MoveIt配置
│   │   ├── config/
│   │   ├── launch/
│   │   ├── srdf/
│   │   └── package.xml / CMakeLists.txt
│   │
│   ├── your_robot_bringup/          # 统一启动包
│   │   ├── launch/
│   │   │   └── bringup.launch.py    # 启动所有组件
│   │   └── package.xml / CMakeLists.txt
│   │
│   └── gazebo_ros_pkgs/             # Gazebo Classic ROS接口依赖包
│
└── build/ install/ log/



重新梳理整个流程，在所有的仿真环境以及其他的功能配置齐全以后，当前的仿真目标如下：
（1）我在手动或者示教后moveit可以计算出之后发布的信息（所有关节角状态，以及中间过程），由gazebo预留输入接口进行接收信息，来执行仿真环境下的操作，然后会发布一些传感器数据，交由rviz订阅，来进行相关数据的可视化

（2）然后是希望在某个地方添加算法来处理图像数据，返回目标坐标，来代替人工示教，实现自动化的抓取

（3）最后是希望添加深度学习模型，包括部署，来实现自动化适应环境的抓取，提高抓取的成功率

（4）最后是希望能做一个比较合理的逻辑链条，最好是小一点的大模型，实现自主的逻辑判断
